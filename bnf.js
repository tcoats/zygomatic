// Generated by CoffeeScript 1.9.2
module.exports = {
  stringify: function(ast) {
    var escape, expression, expressions, production;
    escape = function(text) {
      return text.replace(/\\/g, '\\\\').replace(/\"/g, '\"').replace(/\n/g, '\\n').replace(/\t/g, '\\t');
    };
    expression = function(e) {
      var exp, res;
      res = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = e.length; i < len; i++) {
          exp = e[i];
          if (exp.nt != null) {
            results.push(exp.nt);
          } else {
            results.push("\"" + (escape(exp.t)) + "\"");
          }
        }
        return results;
      })();
      return res.join(' ');
    };
    expressions = function(e) {
      var exp, res;
      res = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = e.length; i < len; i++) {
          exp = e[i];
          results.push(expression(exp));
        }
        return results;
      })();
      return (res.join(' | ')) + ";";
    };
    production = function(e) {
      var exp, res, term;
      res = (function() {
        var results;
        results = [];
        for (term in e) {
          exp = e[term];
          results.push(term + " = " + (expressions(exp)));
        }
        return results;
      })();
      return res.join('\n');
    };
    return production(ast);
  },
  parse: function(input) {
    var EOF, eat, error, escaped, expression, expressions, grammar, id, isChar, isIdChar, line, linePos, nonterminal, peek, pos, production, term, terminal, terminal_text, ws;
    EOF = -1;
    pos = 0;
    line = 1;
    linePos = 0;
    error = function(msg) {
      throw new SyntaxError(msg + " at " + line + ":" + linePos);
    };
    peek = function() {
      if (pos >= input.length) {
        return EOF;
      }
      return input[pos];
    };
    eat = function(expected) {
      var ch;
      ch = peek();
      if (expected !== void 0 && expected !== ch) {
        error("Expected " + expected + ", got " + ch);
      }
      if (ch === EOF) {
        return EOF;
      }
      pos++;
      linePos++;
      return ch;
    };
    ws = function() {
      var ch, ret;
      ret = '';
      ch = void 0;
      while (' \n\u0009'.indexOf(ch = peek()) >= 0) {
        if (ch === '\n') {
          line++;
          linePos = 0;
        }
        ret += eat();
      }
      return ret;
    };
    escaped = function() {
      var ch;
      eat('\\');
      ch = peek();
      switch (ch) {
        case 'n':
          eat();
          return '\n';
        case 't':
          eat();
          return '\u0009';
        case '"':
          eat();
          return '"';
        case '\\':
          eat();
          return '\\';
        default:
          return error('Invalid escape sequence: \\' + ch);
      }
    };
    isChar = function() {
      var ch;
      ch = peek();
      return ch !== EOF && (/[a-zA-Z0-9\-_|:=; \/\(\)<>]/.test(ch) || ch === '\\');
    };
    isIdChar = function() {
      var ch;
      ch = peek();
      return ch !== EOF && (/[a-zA-Z_]/.test(ch));
    };
    id = function() {
      var ch, ret;
      ret = '';
      ch = void 0;
      while (isIdChar()) {
        if (peek() === '\\') {
          ret += escaped();
        } else {
          ret += eat();
        }
      }
      return ret;
    };
    terminal_text = function() {
      var ch, ret;
      ret = '';
      ch = peek();
      while (isChar()) {
        if (ch === '\\') {
          ret += escaped();
        } else {
          ret += eat();
        }
        ch = peek();
      }
      return ret;
    };
    terminal = function() {
      var res;
      eat('"');
      res = terminal_text();
      eat('"');
      return {
        t: res
      };
    };
    nonterminal = function() {
      var res;
      res = id();
      return {
        nt: res
      };
    };
    term = function() {
      if (isIdChar(peek())) {
        return nonterminal();
      } else {
        return terminal();
      }
    };
    expression = function() {
      var res;
      res = [term()];
      ws();
      while (isIdChar(peek()) || peek() === '"') {
        res.push(term());
        ws();
      }
      return res;
    };
    expressions = function() {
      var res;
      res = [expression()];
      while (peek() === '|') {
        eat('|');
        ws();
        res.push(expression());
      }
      return res;
    };
    production = function() {
      var lhs, rhs;
      lhs = nonterminal();
      ws();
      eat('=');
      ws();
      rhs = expressions();
      eat(';');
      return [lhs.nt, rhs];
    };
    grammar = function() {
      var r, res;
      res = {};
      r = production();
      res[r[0]] = r[1];
      ws();
      while (isIdChar(peek())) {
        r = production();
        res[r[0]] = r[1];
        ws();
      }
      return res;
    };
    return grammar();
  }
};
